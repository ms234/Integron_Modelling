% 1) Generate the sequence at which the different stressors are turned off
% and on
t = 0;
lambdaVec = sigVel/2*[1/(1-sigMean), 1/sigMean];
initState = binornd(1,0.5); % Initialise randomly
currState = initState;
switchTimeVec = [];
switchIdx = 1;

while t<T
    r = rand(1);
    waitingTime = 1/lambdaVec(currState+1)*log(1/r);
    currState = mod(currState+1,2);
    switchTimeVec(switchIdx) = t+waitingTime;
    t = switchTimeVec(switchIdx);
    switchIdx = switchIdx + 1;
end
%%
%%
% Main simulations loop
SVec = [initState, 0];
tStart = 0;
tEnd = switchTimeVec(1);
tVec = [];
ResultsMat = [];
SMat = [];
initPop = popVec;

for intervalIdx = 1:(length(switchTimeVec)-1)
    % Function defining the model equations
    modelEqs = @(t,x) basicModelEqs(x,nGenTypes, K, n0, nI, rho, theta, mu, resistLevelMat, MExc, MInt, SVec);

    % Simulate the odes on this interval
    [tVectmp,resultstmp] = ode45(modelEqs,[tStart tEnd],initPop);
    
    % Append results for this interval to total results
    tVec = [tVec;tVectmp];
    ResultsMat = [ResultsMat; resultstmp];
    SMattmp = ones(length(tVectmp), nStressors);
    SMattmp(:,1) = SVec(1);
    SMattmp(:,2) = SVec(2);
    SMat = [SMat; SMattmp];
    
    % Update the start and end times of the interval
    tStart = tEnd;
    tEnd = switchTimeVec(intervalIdx+1);
    currState = mod(currState+1,2);
    initPop = ResultsMat(end,:)';
    
    % Update the state of the stressors
    SVec = [mod(SVec(1)+1,2), 0];
end
